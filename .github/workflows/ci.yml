name: CI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-lint-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-lint-

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort pylint

    - name: Run flake8 (syntax errors and undefined names)
      run: |
        flake8 software/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run flake8 (code quality)
      run: |
        flake8 software/ --count --exit-zero --max-complexity=15 --max-line-length=120 --statistics --ignore=E203,W503
      continue-on-error: true

    - name: Check import sorting with isort
      run: |
        isort --check-only --profile black software/
      continue-on-error: true

    - name: Check code formatting with black
      run: |
        black --check --line-length 120 software/
      continue-on-error: true

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12', '3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('software/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r software/requirements.txt

    - name: Verify installation
      run: |
        python -c "import cv2; print(f'OpenCV: {cv2.__version__}')"
        python -c "import numpy; print(f'NumPy: {numpy.__version__}')"
        python -c "from ultralytics import YOLO; print('YOLO imported successfully')"

    - name: Run tests with coverage
      run: |
        cd software && pytest -v --tb=short --cov=hud --cov=tests --cov-report=term-missing --cov-report=xml

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        file: software/coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: software/.pytest_cache
        retention-days: 7
      continue-on-error: true
